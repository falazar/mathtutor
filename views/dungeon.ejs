<!DOCTYPE html>
<html>
<head>
    <title>Maze</title>
    <style>
        #dungeonMap {
            position: absolute;
            top: 0;
            left: 0;
            width: 2400px;
            height: 1600px;
            z-index: -1;
        }

        #player {
            position: absolute;
            width: 25px;
            height: 25px;
            background-color: blue;
            border-radius: 50%;
            border: 2px solid #031a52;
            z-index: 2;
        }
    </style>
    <script>
      /*
      Good dungeon creation here:
      Copilot:
      Underground map of a Dungeons and Dragons style dungeon, 30x30 hexes, with cave exits, a river, and buildings with torches

       */
      let player;
      const playerStartX = 800;
        const playerStartY = 200;

      // Define the size of the grid
      const gridWidth = 120;
      const gridHeight = 80;
      // 20x20 pixels.
      const cellSize = 20;

      // Create a 2D array to represent the grid - default open.
      let grid = Array(gridHeight).fill(null).map(() => Array(gridWidth).fill(1));

      let allowEdit = false;
      let markBlocker = false;

      let isMouseDown = false;


      // NOTE: Hardcoded map layout.
      const gridStr = ["11111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "11111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "11111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "11111111111111111111111111111111111111111111100111111111111111111111111111111111",
        "11111111111111111111111111111111111111111100000011111111111111111111111111111111",
        "11111111111111111111111111111111111111111001111001111111111111111111111111111111",
        "11111111111111111111111111111111111111110011111100111111111111111111111111111111",
        "11111111111111111111111111111111111111100111111110111111111110000000011111111111",
        "11111111111111111111111111111111111111001111111110111111111111111111001111111111",
        "11111111111111111111111111111111111110011111111110011111111111111111101111111111",
        "11111111111111111111111111111111111000111111111111011111111111111111101111111111",
        "11111111111111111111111111111111100011111111111111001111100011111111101111111111",
        "11111111111111111111111111111111001111111111111111001110001111111111001111111111",
        "11111111111111111111111111111111011111111111111111001100111111000000011111111111",
        "11111111111111111111111111111111011111111111111111100001111100011111111111111111",
        "11111111111111111111111111111111001111111111111111111111110001111111111111111111",
        "11111111111111111111111111111111100111111111111111111111100111111111111111111111",
        "11111111111111111111111111111111110001111111111111111111001111111111111111111111",
        "11111111111111111111111111111111111100111111111111111100111111111111111111111111",
        "11111111111111111111111111111111111110011111111111110001111111111111111111111111",
        "11111111111111111111111111111111111111111111111111100011111111111111111111111111",
        "11111111111111111111111111111111111111111111111100001111111111111111111111111111",
        "11111111111111111111111111111111111111110011111001111111111111111111111111111111",
        "11111111111111111111111111111111111111111000111011111111111111111111111111111111",
        "11111111111111111111111111111111111111111110000011111111111111111111111111111111",
        "11111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "11111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "11111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "11111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "11111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "11111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "11111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "11111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "11111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "11111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "11111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "11111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "11111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "11111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "11111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "11111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "11111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "11111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "11111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "11111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "11111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "11111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "11111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "11111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "11111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "11111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "11111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "11111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "11111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "11111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "11111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "11111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "11111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "11111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "11111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "11111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "11111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "11111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "11111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "11111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "11111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "11111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "11111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "11111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "11111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "11111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "11111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "11111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "11111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "11111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "11111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "11111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "11111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "11111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "11111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "11111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "11111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "11111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "11111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "11111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "11111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "11111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "11111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "11111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "11111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "11111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "11111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "11111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "11111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "11111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "11111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "11111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "11111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "11111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "11111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "11111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "11111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "11111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "11111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "11111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "11111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "11111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "11111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "11111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "11111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "11111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "11111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "11111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "11111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "11111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "11111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "11111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "11111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "11111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "11111111111111111111111111111111111111111111111111111111111111111111111111111111"]
      grid = convertStringToGrid(gridStr);


      function convertStringToGrid(gridStr) {
        let grid = [];
        for (let j = 0; j < gridStr[0].length; j++) {
          let row = [];
          for (let i = 0; i < gridStr.length; i++) {
            row.push(Number(gridStr[i][j]));
          }
          grid.push(row);
        }
        return grid;
      }


      // Main Game start listener.
      document.addEventListener('DOMContentLoaded', function () {
        initGame();
      });

      function initGame() {
        // Create the player
        player = createPlayer();

        // Move the player
        document.addEventListener('keydown', function (event) {
          handleKeyboardInput(event, player);
        });

        // Listen for the mousedown event
        document.getElementById('dungeonMap').addEventListener('mousedown', function (event) {
          event.preventDefault(); // Prevent the default behavior
          isMouseDown = true;
          if (allowEdit) {
            markCell(event);
          }
        });

        // Listen for the mousemove event
        document.getElementById('dungeonMap').addEventListener('mousemove', function (event) {
          if (isMouseDown && allowEdit) {
            markCell(event);
          }
        });

        // Listen for the mouseup event
        document.addEventListener('mouseup', function () {
          isMouseDown = false;
        });

      } // init

      function createPlayer() {
        let player = document.getElementById('player');
        player.innerText = "Jay";

        // Start position.
        player.style.left = playerStartX + 'px';
        player.style.top = playerStartY + 'px';

        return player;
      }

      function handleKeyboardInput(event, player) {
        let top = parseInt(player.style.top);
        let left = parseInt(player.style.left);

        let newTop = top;
        let newLeft = left;

        switch (event.key) {
          case 'ArrowUp':
            newTop = top - 10;
            event.preventDefault();
            break;
          case 'ArrowDown':
            newTop = top + 10;
            event.preventDefault();
            break;
          case 'ArrowLeft':
            newLeft = left - 10;
            event.preventDefault();
            break;
          case 'ArrowRight':
            newLeft = left + 10;
            event.preventDefault();
            break;
          case 'm':
            allowEdit = !allowEdit;
            markBlocker = true;
            if (allowEdit) {
              redrawBlockedCells();
            } else {
              printMarkedCells();
            }
            break;
          case '1':
            markBlocker = !markBlocker;
            break;
        }

        // Calculate the new grid position
        // let newX = Math.floor(newLeft / cellSize);
        // let newY = Math.floor(newTop / cellSize);


        // Check if the new position is a blocked cell
        if (isPlayerColliding(player, newLeft, newTop)) {
          console.log("Player is colliding with a blocked cell");
        } else {
          // If the cell is walkable, update the player's position
          player.style.top = newTop + 'px';
          player.style.left = newLeft + 'px';
        }
      }

function isPlayerColliding(player, playerLeft, playerTop) {
    // Calculate the player's position in the grid
    // let playerLeft = parseInt(player.style.left);
    // let playerTop = parseInt(player.style.top);
    let playerRight = playerLeft + player.offsetWidth;
    let playerBottom = playerTop + player.offsetHeight;

    // Calculate the grid coordinates of the player's corners
    let topLeft = { x: Math.floor(playerLeft / cellSize), y: Math.floor(playerTop / cellSize) };
    let topRight = { x: Math.floor(playerRight / cellSize), y: Math.floor(playerTop / cellSize) };
    let bottomLeft = { x: Math.floor(playerLeft / cellSize), y: Math.floor(playerBottom / cellSize) };
    let bottomRight = { x: Math.floor(playerRight / cellSize), y: Math.floor(playerBottom / cellSize) };

    // Check if any of the corners are in a blocked cell
    if (!isCellWalkable(topLeft.x, topLeft.y) || !isCellWalkable(topRight.x, topRight.y) ||
        !isCellWalkable(bottomLeft.x, bottomLeft.y) || !isCellWalkable(bottomRight.x, bottomRight.y)) {
        return true;
    }

    return false;
}

      // Function to mark a cell
      function markCell(event) {
        let x = Math.floor(event.clientX / cellSize);
        let y = Math.floor(event.clientY / cellSize);
        if (markBlocker) {
          markCellAsBlocked(x, y);
        } else {
          markCellAsWalkable(x, y);
        }
      }

      // Function to mark a cell as walkable
      function markCellAsWalkable(x, y) {
        // todo invert
        if (x >= 0 && x < gridHeight && y >= 0 && y < gridWidth) {
          grid[x][y] = 1;

          // Get the blocked cell div
          let blockedCell = document.getElementById('blockedCell_' + x + '_' + y);
          // If the blocked cell div exists, remove it
          if (blockedCell) {
            document.body.removeChild(blockedCell);
          } else {
            console.log("DEBUG: No blocked cell found at " + x + " " + y);
          }
        }
      }

      // Function to mark a cell as blocked.
      function markCellAsBlocked(x, y) {
        // todo invert
        if (x >= 0 && x < gridHeight && y >= 0 && y < gridWidth) {
          grid[x][y] = 0;

          // Create a new div element
          let blockedCell = document.createElement('div');
          blockedCell.id = 'blockedCell_' + x + '_' + y;

          // Set the position, size, and color of the div
          blockedCell.style.position = 'absolute';
          blockedCell.style.left = (x * cellSize) + 'px';
          blockedCell.style.top = (y * cellSize) + 'px';
          blockedCell.style.width = cellSize + 'px';
          blockedCell.style.height = cellSize + 'px';
          blockedCell.style.backgroundColor = 'transparent';
          blockedCell.style.border = '1px solid red';

          // Ignore mouse events on the blocked cell
          blockedCell.style.pointerEvents = 'none';

          // Append child to main body.
          document.body.appendChild(blockedCell);
        }
      }

      // Function to check if a cell is walkable
      function isCellWalkable(x, y) {
        return x >= 0 && x < gridHeight && y >= 0 && y < gridWidth && grid[x][y] === 1;
      }

      function redrawBlockedCells() {
        // Remove all existing blocked cells
        let blockedCells = document.querySelectorAll('[id^="blockedCell_"]');
        blockedCells.forEach(function (blockedCell) {
          blockedCell.parentNode.removeChild(blockedCell);
        });

        // Redraw all blocked cells
        for (let i = 0; i < gridHeight; i++) {
          for (let j = 0; j < gridWidth; j++) {
            if (grid[i][j] === 0) {
              console.log("DEBUG: adding grid ", grid[i][j] + " at " + i + " " + j);
              let blockedCell = document.createElement('div');
              blockedCell.id = 'blockedCell_' + i + '_' + j;

              // TODO move styles up out.
              // Set the position, size, and color of the div
              blockedCell.style.position = 'absolute';
              blockedCell.style.left = (i * cellSize) + 'px';
              blockedCell.style.top = (j * cellSize) + 'px';
              blockedCell.style.width = cellSize + 'px';
              blockedCell.style.height = cellSize + 'px';
              blockedCell.style.border = '1px solid red';
              blockedCell.style.backgroundColor = 'transparent';

              // Ignore mouse events on the blocked cell
              blockedCell.style.pointerEvents = 'none';

              // Append the blocked cell to the dungeonMap
              document.body.appendChild(blockedCell);
            }
          }
        }
      }

      // NOTE inverted to allow pretty visible.
      function printMarkedCells() {
        let output = '[';
        for (let j = 0; j < gridWidth; j++) {
          output += '"';
          for (let i = 0; i < gridHeight; i++) {
            output += grid[i][j];
          }
          output += '"';
          if (j < gridWidth - 1) {
            output += ',\n';
          }
        }
        output += ']';
        console.log(output);
      }

    </script>
</head>
<body>
DUNGEON.

<div id="player"></div>


<div id="dungeonMap">
    <img src="/images/dungeon.png" alt="Dungeon" style="width: 2400px; height: 1600px;">
</div>

</body>
</html>