<!DOCTYPE html>
<html>
<head>
    <title>Maze</title>
    <style>
        #dungeonMap {
            position: absolute;
            top: 0;
            left: 0;
            width: 2400px;
            height: 1600px;
            z-index: -1;
        }

        #player {
            position: absolute;
            width: 25px;
            height: 25px;
            background-color: blue;
            border-radius: 50%;
            border: 2px solid #031a52;
            z-index: 2;
        }
    </style>
    <script>
      /*
      Good dungeon creation here:
      Copilot:
      Underground map of a Dungeons and Dragons style dungeon, 30x30 hexes, with cave exits, a river, and buildings with torches

       */
      let player;
      const playerStartX = 800;
      const playerStartY = 200;

      // Define the size of the grid
      const gridWidth = 120;
      const gridHeight = 80;
      // 20x20 pixels.
      const cellSize = 20;

      // Create a 2D array to represent the grid - default open.
      let grid = Array(gridHeight).fill(null).map(() => Array(gridWidth).fill(1));

      let allowEdit = false;
      let markBlocker = false;
      let isMouseDown = false;


      // NOTE: Hardcoded map layout.
      // TODO loda from db
      const gridStr = ["111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "111111111111111111111111111111111111111111100111111111111111111111111111111111111111111111111111111111111111111111111111",
        "111111111111111111111111111111111111111111000001111111111111100111111111111111111111111111111111111111111111111111111111",
        "111111111111111111111111111111111111111110011101111111111111000011111111111111111111111111111111111111111111111111111111",
        "111111111111111111111111111111111111111100111110011111111111011010001111111111111111111111111111111111111111111111111111",
        "111111111111111111111111111111111111111001111111001111111110011000100111111111111111111111111111111111111111111111111111",
        "111111111111111111111111111111111111110011111111100111111110111001110011111111111111111111111111111111111111111111111111",
        "111111111111111111111111111111111111000111111111110111111100111011111011111111111111111111111111111111111111111111111111",
        "111111111111111111111111100111111100011111111111110011111101111111111011111111111111111111111111111111111111111111111111",
        "111111111111111111111111000001000001111111111111111001111001111111111011111111111111111111111111111111111111111111111111",
        "111111111111111111111110011110000011111111111111110001110111111111110011111111111111111111111111111111111111111111111111",
        "111111111111111111111100111111000111111111111111111001101111111011110111111111111111111111111111111111111111111111111111",
        "111111111111111111111001111111100111111111111111111100011111100011100111111111111111111111111111111111111111111111111111",
        "111111111111111111110011111111110011111111111111111110111110000011001111111111111111111111111111111111111111111111111111",
        "111111111111111111101111111111111001111111111111111111111001110110011111111111111111111111111111111111111111111111111111",
        "111111111111111111011111111111111100111111111111111111110011110000111111111111111111111111111111111111111111111111111111",
        "111111111111111110011111111111111111011111111111111111100111111001111111111111111111111111111111111111111111111111111111",
        "111111111111111100111111111111111111101111111111111101001111111111111111111111111111111111111111111111111111111111111111",
        "111111111111111001111111111111111111101111111111111000011111111111111111111111111111111111111111111111111111111111111111",
        "111111111111111011111111111111111111111111111111100011111111111111111111111111111111111111111111111111111111111111111111",
        "111111111111111001111111111111111111111101111111001111111111111111111111111111111111111111111111111111111111111111111111",
        "111111111111111101111111111111111111111100011110011111111111111111111111111111111111111111111111111111111111111111111111",
        "111111111111111101111111111111111111111111000000111111111111111111111111111111111111111111111111111111111111111111111111",
        "111111111111111001111111111111111111111111110011111111111111111111111111111111111111111111111111111111111111111111111111",
        "111111111111111001111111111111111111111111110011111111111111111111111111111111111111111111111111111111111111111111111111",
        "111111111111111101111111111111111111111111111011111111111111111111111111111111111111111111111111111111111111111111111111",
        "111111111111111100111111111111111111111111110011111111111111111111111111111111111111111111111111111111111111111111111111",
        "111111111111111110111111111111111111111111100111111111111111111111111111111111111111111111111111111111111111111111111111",
        "111111111111111100111111111111111111111111001111111111111111111111111111111111111111111111111111111111111111111111111111",
        "111111111111111001111111111111111111111110010011111111111111111111111111111111111111111111111111111111111111111111111111",
        "111111111111111011111111111111111111111100111001111111111111111111111111111111111111111111111111111111111111111111111111",
        "111111111111111011111111111111111111110001111100111111111111111111111111111111111111111111111111111111111111111111111111",
        "111111111111111011111101111111111111100111111110111111111111111111111111111111111111111111111111111111111111111111111111",
        "111111111111111011111000011111111111001111111111001111111111111111111111111111111111111111111111111111111111111111111111",
        "111111111111111001111011001111111110011111111111100111111111111111111111111111111111111111111111111111111111111111111111",
        "111111111111111101110111100011111100111111111111110011111111111111111111111111111111111111111111111111111111111111111111",
        "111111111111111100000111110111111101111111111111111001111111111111111111111111111111111111111111111111111111111111111111",
        "111111111111111110011111000110111001111111111111111100111111111111111111111111111111111111111111111111111111111111111111",
        "111111111111111111111110011110000011111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "111111111111111111111100111100110011111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
        "111111111111111111111101111101110111111111111111111111111001111111111111111111111111111111111111111111111111111111111111",
        "111111111111111111111101111011110111111111111111111111110011111111111111111111111111111111111111111111111111111111111111",
        "111111111111111111111101110011110011111111111111111111100111111111111111111111111111111111111111111111111111111111111111",
        "111111111111111111111100110111110011111111111111111111001111111111111111111111111111111111111111111111111111111111111111",
        "111111111111111111111110111001100111111111111111111100111111111111111111111111111111111111111111111111111111111111111111",
        "111111111111111111111100111100001111111111111111111101111111111111111111111111111111111111111111111111111111111111111111",
        "111111111111111111111101111111111111001111111111111100111111111111111111111111111111111111111111111111111111111111111111",
        "111111111111111111111001111111111110000111111111111110011000000111111111111111111111111111111111111111111111111111111111",
        "111111111111111111100000100111111100100111111111100111001011110011111111111111111111111111111111111111111111111111111111",
        "111111111111111100011110000011111001001100111111000111100011111011111111111111111111111111111111111111111111111111111111",
        "111111111111111101111111111001111100011100011111010011111111111011111111111111111111111111111111111111111111111111111111",
        "111111111111111001111111110011111100111100011110011001111111110011111111111111111111111111111111111111111111111111111111",
        "111111111111111011111101100111111111111000111100111100111111100111111111111111111111111111111111111111111111111111111111",
        "111111111111111001111100001111111111100001111001111110011111101111111111111111111111111111111111111111111111111111111111",
        "111111111111111001111100111111111111111001111000111100111111101111111111111111111111111111111111111111111111111111111111",
        "111111111111110011111101111111111111111111111110010001111111100110001111111111111111111111111111111111111111111111111111",
        "111111111111110011111101111111111111111111111111000111111111110000101111111111111111111111111111111111111111111111111111",
        "111111111111110000111111111111111111111111111111111111111111111111101111111111111111111111111111111111111111111111111111",
        "111111111111101110001111111111111111111110000001111111111111111111101111111111111111111111111111111111111111111111111111",
        "111111111111111111101111111111111111111111000000111111111111111111101111111111111111111111111111111111111111111111111111",
        "111111111111111111101111011111111111111111101110001111111111111111001111111111111111111111111111111111111111111111111111",
        "111111111111111100001111101111111111111111101111011111111111111000011111111111111111111111111111111111111111111111111111",
        "111111111111111001001111110111111111100111101100011111111111110011111111111111111111111111111111111111111111111111111111",
        "111111111111111010111101111011111111100011101001111111111111100111111111111111111111111111111111111111111111111111111111",
        "111111111111111010011100111100111111110111000011111111111111110011111111111111111111111111111111111111111111111111111111",
        "111111111111110011011110011110011111111111010111111111111111111001111111111111111111111111111111111111111111111111111111",
        "111111111111110111001111001111011100111111010111111111111111111100011111111111111111111111111111111111111111111111111111",
        "111111111111110111100111100111111001011111000111111111111111111111001111111111111111111111111111111111111111111111111111",
        "111111111111110111100001111111110011001110001111111111111111001111101111111111111111111111111111111111111111111111111111",
        "111111111111110011110000111111111001101110001111111111111110001111101111111111111111111111111111111111111111111111111111",
        "111111111111111001111000011100011100011110011111111111111110001111101111111111111111111111111111111111111111111111111111",
        "111111111111111100111101111101101111111100000111111111111100011111001111111111111111111111111111111111111111111111111111",
        "111111111111111110011111111101100111111001110000000111111001000110011111111111111111111111111111111111111111111111111111",
        "111111111111111111011111111101110011110011111111110011111011110000111111111111111111111111111111111111111111111111111111",
        "111111111111111111100000000011111101100111111111111001110011111111111111111111111111111111111111111111111111111111111111",
        "111111111111111111111111111111111100011111111111111100000111111111111111111111111111111111111111111111111111111111111111",
        "111111111111111111111111111111111111111111111111111111001111111111111111111111111111111111111111111111111111111111111111",
        "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
      ]
      grid = convertStringToGrid(gridStr);

      // TODO load from db.
      let mapObjects = [
        {
          id: 1,
          name: 'Treasure Chest',
          icon: '🎁',
          x: 25,
          y: 25
        },
        {
          id: 2,
          name: 'Health Potion',
          icon: '❤️',
          x: 50,
          y: 60
        },
        {
          id: 3,
          name: 'Treasure Chest',
          icon: '🎁',
          x: 62,
          y: 8
        },
        {
          id: 4,
          name: 'Health Potion',
          icon: '❤️',
          x: 48,
          y: 12
        }
      ];

      function convertStringToGrid(gridStr) {
        // Iterate over each string in the gridStr array
        for (let i = 0; i < gridStr.length; i++) {
          // Convert each string into an array of numbers
          let row = gridStr[i].split('').map(Number);

          // Check if grid[i] is defined
          if (typeof grid[i] === "undefined") {
            // If not, initialize it to an empty array
            grid[i] = [];
          }

          // Iterate over each number in the row
          for (let j = 0; j < row.length; j++) {
            // Overwrite the corresponding cell in the grid
            // if (grid[i] !== undefined) {
            grid[i][j] = row[j];
            // }
          }
        }
        console.log("DEBUG: grid ", grid);
        return grid;
      }

      function convertStringToGridOLD(gridStr) {
        let grid = [];
        for (let j = 0; j < gridStr[0].length; j++) {
          let row = [];
          for (let i = 0; i < gridStr.length; i++) {
            row.push(Number(gridStr[i][j]));
          }
          grid.push(row);
        }
        return grid;
      }


      // Main Game start listener.
      document.addEventListener('DOMContentLoaded', function () {
        initGame();
      });

      function initGame() {
        // Create the player
        player = createPlayerDiv();

        showObjects();

        // Move the player
        document.addEventListener('keydown', function (event) {
          handleKeyboardInput(event, player);
        });

        // Listen for the mousedown event
        document.getElementById('dungeonMap').addEventListener('mousedown', function (event) {
          event.preventDefault(); // Prevent the default behavior
          isMouseDown = true;
          if (allowEdit) {
            markCell(event);
          }
        });

        // Listen for the mousemove event
        document.getElementById('dungeonMap').addEventListener('mousemove', function (event) {
          if (isMouseDown && allowEdit) {
            markCell(event);
          }
        });

        // Listen for the mouseup event
        document.addEventListener('mouseup', function () {
          isMouseDown = false;
        });

      } // init

      function showObjects() {
        // Iterate over each object in the mapObjects array
        for (let i = 0; i < mapObjects.length; i++) {
          // Create a new div element
          let objectElement = document.createElement('div');
          objectElement.id = 'object_' + mapObjects[i].id;

          // Set the position, size, and text of the element
          objectElement.style.position = 'absolute';
          objectElement.style.left = (mapObjects[i].x * cellSize) + 'px';
          objectElement.style.top = (mapObjects[i].y * cellSize) + 'px';
          objectElement.style.width = cellSize + 'px';
          objectElement.style.height = cellSize + 'px';
          // objectElement.style.textAlign = 'center';
          objectElement.style.lineHeight = cellSize + 'px';
          objectElement.innerText = mapObjects[i].icon;

          // Append the element to the body of the document
          document.body.appendChild(objectElement);
        }
      }

      function createPlayerDiv() {
        let player = document.getElementById('player');
        player.innerText = "Jay";

        // Start position.
        player.style.left = playerStartX + 'px';
        player.style.top = playerStartY + 'px';

        return player;
      }

      function handleKeyboardInput(event, player) {
        let top = parseInt(player.style.top);
        let left = parseInt(player.style.left);

        let newTop = top;
        let newLeft = left;

        switch (event.key) {
          case 'ArrowUp':
            newTop = top - 10;
            event.preventDefault();
            break;
          case 'ArrowDown':
            newTop = top + 10;
            event.preventDefault();
            break;
          case 'ArrowLeft':
            newLeft = left - 10;
            event.preventDefault();
            break;
          case 'ArrowRight':
            newLeft = left + 10;
            event.preventDefault();
            break;
          case 'm':
            allowEdit = !allowEdit;
            markBlocker = true;
            if (allowEdit) {
              redrawBlockedCells();
            } else {
              printMarkedCells();
            }
            break;
          case '1':
            markBlocker = !markBlocker;
            break;
        }

        // Calculate the new grid position
        let newX = Math.floor(newLeft / cellSize);  // todo
        let newY = Math.floor(newTop / cellSize);


        // Check if the new position is a blocked cell
        if (isPlayerColliding(player, newLeft, newTop)) {
          console.log("Player is colliding with a blocked cell at newx,newy=" + newX + " " + newY);
        } else {
          // If the cell is walkable, update the player's position
          player.style.top = newTop + 'px';
          player.style.left = newLeft + 'px';

          // Detect if the player has landed on an object
          detectObjectHit(newX, newY);
        }
      }

      function isPlayerColliding(player, playerLeft, playerTop) {
        // Calculate the player's position in the grid
        // let playerLeft = parseInt(player.style.left);
        // let playerTop = parseInt(player.style.top);
        let playerRight = playerLeft + player.offsetWidth;
        let playerBottom = playerTop + player.offsetHeight;

        // Calculate the grid coordinates of the player's corners
        let topLeft = {x: Math.floor(playerLeft / cellSize), y: Math.floor(playerTop / cellSize)};
        let topRight = {x: Math.floor(playerRight / cellSize), y: Math.floor(playerTop / cellSize)};
        let bottomLeft = {x: Math.floor(playerLeft / cellSize), y: Math.floor(playerBottom / cellSize)};
        let bottomRight = {x: Math.floor(playerRight / cellSize), y: Math.floor(playerBottom / cellSize)};

        // Check if any of the corners are in a blocked cell
        if (!isCellWalkable(topLeft.x, topLeft.y) || !isCellWalkable(topRight.x, topRight.y) ||
          !isCellWalkable(bottomLeft.x, bottomLeft.y) || !isCellWalkable(bottomRight.x, bottomRight.y)) {
          return true;
        }

        return false;
      }

      function detectObjectHit(playerX, playerY) {

        // Iterate over each object in the mapObjects array
        for (let i = 0; i < mapObjects.length; i++) {
          // If the player's position matches the object's position
          if (mapObjects[i].x === playerX && mapObjects[i].y === playerY) {
            // TODO make method.

            pickUpObject(i, playerX, playerY);

            // Break the loop as the object has been found and removed
            break;
          }
        }
      }

      function pickUpObject(i, x, y) {
        // "Pick up" the object and remove it from the array
        console.log("Picked up " + mapObjects[i].name);
        console.log("DEBUG: id = " + mapObjects[i].id);

        // Remove the object from the page
        // let objectElement = document.querySelector(`div[style*='left: ${x * cellSize}px'][style*='top: ${y * cellSize}px']`);
        let objectElement = document.getElementById('object_' + mapObjects[i].id);
        if (objectElement) {
          document.body.removeChild(objectElement);
        }

        // Show a notification
        showNotificationFade("You picked up " + mapObjects[i].name + "!");

        // TODO add to inventory or do whatever game effect you want.

        // Remove it from list now.
        mapObjects.splice(i, 1);
      }

      function showNotificationFade(text) {
        // Create a new div element
        let notification = document.createElement('div');

        // Set the text of the notification
        notification.innerText = text;

        // Style the notification
        notification.style.position = 'fixed';
        notification.style.left = '50%';
        notification.style.top = '50%';
        notification.style.transform = 'translate(-50%, -50%)';
        notification.style.padding = '20px';
        notification.style.backgroundColor = 'rgba(0, 0, 0, 0.7)';
        notification.style.color = 'white';
        notification.style.fontSize = '20px';
        notification.style.border = '3px solid white';
        notification.style.borderRadius = '10px';
        notification.style.zIndex = '9999';

        // Append the notification to the body of the document
        document.body.appendChild(notification);

        // After 3 seconds, fade out the notification and remove it from the document
        setTimeout(function () {
          notification.style.transition = 'opacity 1s';
          notification.style.opacity = '0';
          setTimeout(function () {
            document.body.removeChild(notification);
          }, 1000);
        }, 3000);
      }

      // Function to mark a cell
      function markCell(event) {
        let x = Math.floor((event.clientX + window.scrollX) / cellSize);
        let y = Math.floor((event.clientY + window.scrollY) / cellSize);
        console.log("DEBUG: marking cell at " + x + " " + y);
        if (markBlocker) {
          markCellAsBlocked(x, y);
        } else {
          markCellAsWalkable(x, y);
        }
      }

      // Function to mark a cell as walkable
      function markCellAsWalkable(x, y) {
        // todo invert
        if (x >= 0 && x < gridWidth && y >= 0 && y < gridHeight) {
          grid[y][x] = 1;  // inverted access.

          // Get the blocked cell div
          let blockedCell = document.getElementById('blockedCell_' + x + '_' + y);
          // If the blocked cell div exists, remove it
          if (blockedCell) {
            document.body.removeChild(blockedCell);
          } else {
            console.log("DEBUG: No blocked cell found at " + x + " " + y);
          }
        }
      }

      // Function to mark a cell as blocked.
      function markCellAsBlocked(x, y) {
        // todo invert
        if (x >= 0 && x < gridWidth && y >= 0 && y < gridHeight) {
          grid[y][x] = 0;  // inverted access.

          // Create a new div element
          let blockedCell = document.createElement('div');
          blockedCell.id = 'blockedCell_' + x + '_' + y;

          // Set the position, size, and color of the div
          blockedCell.style.position = 'absolute';
          blockedCell.style.left = (x * cellSize) + 'px';
          blockedCell.style.top = (y * cellSize) + 'px';
          blockedCell.style.width = cellSize + 'px';
          blockedCell.style.height = cellSize + 'px';
          blockedCell.style.backgroundColor = 'transparent';
          blockedCell.style.border = '1px solid red';

          // Ignore mouse events on the blocked cell
          blockedCell.style.pointerEvents = 'none';

          // Append child to main body.
          document.body.appendChild(blockedCell);
        }
      }

      // Function to check if a cell is walkable
      function isCellWalkable(x, y) {
        return x >= 0 && x < gridHeight && y >= 0 && y < gridWidth && grid[y][x] === 1;
      }

      function redrawBlockedCells() {
        // Remove all existing blocked cells
        let blockedCells = document.querySelectorAll('[id^="blockedCell_"]');
        blockedCells.forEach(function (blockedCell) {
          blockedCell.parentNode.removeChild(blockedCell);
        });

        // Redraw all blocked cells
        for (let i = 0; i < gridWidth; i++) {
          for (let j = 0; j < gridHeight; j++) {
            // console.log("DEBUG: checking grid at " + i + " " + j);
            // if (typeof grid[i] !== "undefined" || typeof grid[i][j] !== "undefined") {
            if (typeof grid[j] === "undefined") {
              console.log("DEBUG: off grid adding grid ", grid[i][j] + " at " + i + " " + j);

            } else if (grid[j][i] === 0) {
              console.log("DEBUG: adding grid ", grid[i][j] + " at " + i + " " + j);
              let blockedCell = document.createElement('div');
              blockedCell.id = 'blockedCell_' + i + '_' + j;

              // TODO move styles up out.
              // Set the position, size, and color of the div
              blockedCell.style.position = 'absolute';
              blockedCell.style.left = (i * cellSize) + 'px';
              blockedCell.style.top = (j * cellSize) + 'px';
              blockedCell.style.width = cellSize + 'px';
              blockedCell.style.height = cellSize + 'px';
              blockedCell.style.border = '1px solid red';
              blockedCell.style.backgroundColor = 'transparent';

              // Ignore mouse events on the blocked cell
              blockedCell.style.pointerEvents = 'none';

              // Append the blocked cell to the dungeonMap
              document.body.appendChild(blockedCell);
            }
          }
        }
      }

      // NOTE inverted to allow pretty visible.
      function printMarkedCells() {
        let output = '[';
        for (let i = 0; i < gridHeight; i++) {
          // for (let j = 0; j < gridWidth; j++) {
          output += '"';
          for (let j = 0; j < gridWidth; j++) {
            // for (let i = 0; i < gridHeight; i++) {
            // PRINTING inverted here.
            output += grid[i][j];
          }
          output += '"';
          // if (j < gridWidth - 1) {
          output += ',\n';
          // }
        }
        output += ']';
        console.log(output);
      }

    </script>
</head>
<body>
DUNGEON.

<div id="player"></div>


<div id="dungeonMap">
    <img src="/images/dungeon.png" alt="Dungeon" style="width: 2400px; height: 1600px;">
</div>

</body>
</html>