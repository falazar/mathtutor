<!DOCTYPE html>
<html>
<head>
    <title>Scores Page</title>
    <link rel="stylesheet" type="text/css" href="toolbar.css">
    <style>
        body {
            background-image: url('/images/skyclouds.jpg');
            background-repeat: no-repeat;
            background-size: cover;
        }

        #scoresTable {
            border: 3px solid black;
            border-radius: 5px;
            border-radius: 5px;
            border-collapse: collapse; /* Add this line */
        }

        /* Add this to style the table cells */
        #scoresTable td, th {
            border: 3px solid black;
            padding: 3px;

        }

        .headerClass {
            background-color: rgba(255, 255, 255, 0.5); /* white with 50% opacity */
        }

        .center-text {
            text-align: center;
        }

        .top-score {
            background-color: green;
        }

        .bottom-score {
            background-color: red;
        }
    </style>
    <link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/1.11.3/css/jquery.dataTables.css">
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
    <script type="text/javascript" charset="utf8"
            src="https://cdn.datatables.net/1.11.3/js/jquery.dataTables.js"></script>
</head>
<body>

<link rel="stylesheet" type="text/css" href="toolbar.css">
<%- include('toolbar.ejs') %>
<div style="clear:both;"></div>

<!--todo break down by category, title, user later-->

<!--todo show problems that need more work here. -->

<%
function stringToColor(str) {
    let hash = 0;
    for (let i = 0; i < str.length; i++) {
        hash = str.charCodeAt(i) + ((hash << 5) - hash);
    }
    let color = '#';
    for (let i = 0; i < 3; i++) {
        let value = (hash >> (i * 8)) & 0xFF;
        color += ('00' + value.toString(16)).substr(-2);
    }
    return color;
}

function hexToRgbA(hex) {
    let c;
    if (/^#([A-Fa-f0-9]{3}){1,2}$/.test(hex)) {
        c = hex.substring(1).split('');
        if (c.length == 3) {
            c = [c[0], c[0], c[1], c[1], c[2], c[2]];
        }
        c = '0x' + c.join('');
        return 'rgba(' + [(c >> 16) & 255, (c >> 8) & 255, c & 255].join(',') + ',0.5)';
    }
    throw new Error('Bad Hex');
}
%>

<h1>Recent Scores: </h1>
<table id="scoresTable" style="width: auto;">
    <thead>
    <tr class="headerClass">
        <th>User</th>
        <th>Title</th>
        <th>Score</th>
        <th>Correct<br>Answers</th>
        <th>Incorrect<br>Answers</th>
        <th>Grade</th>
        <th>Date</th>
    </tr>
    </thead>
    <tbody>
    <% scores.forEach(function(score) {
        // Color row a random color based on whole name.
        const color = stringToColor(score.username);
    %>
    <tr style="background-color: <%= hexToRgbA(color) %>;">
        <td><%= score.username %></td>
        <td><%= score.title %></td>
        <td class="center-text"><%= score.score %></td>
        <td class="center-text"><%= score.numQuestionsRight %></td>
        <td class="center-text"><%= score.numQuestionsWrong %></td>
        <td class="center-text"><%= score.grade %></td>
        <td><%= score.datetime.toLocaleDateString('en-US'); %></td>
    </tr>
    <% }); %>
    </tbody>
</table>

<script>
  // Calculate the top and bottom thresholds for the scores.
  function calculateThresholds(scores) {
    scores.sort((a, b) => a - b); // Sort the scores in ascending order

    const topThreshold = scores[Math.floor(scores.length * 0.9)];
    const bottomThreshold = scores[Math.floor(scores.length * 0.1)];

    return {topThreshold, bottomThreshold};
  }

  // Setup auto sorting here.
  $(document).ready(function () {
      <% let scoreValues = scores.map(score => score.score); %>
      <% const scoreValuesString = JSON.stringify(scoreValues); %>
    const scoreValues = <%= scoreValuesString %>
    const {topThreshold, bottomThreshold} = calculateThresholds(scoreValues);

    $('#scoresTable').DataTable({
      "order": [[6, "desc"]],
      "pageLength": 20,
      "rowCallback": function (row, data, index) {
        const score = data[2]; // hardcoded row.
        if (score >= topThreshold) {
          $('td:eq(2)', row).addClass('top-score');
        } else if (score <= bottomThreshold) {
          $('td:eq(2)', row).addClass('bottom-score');
        }

        var grade = data[5];
        if (grade < 70) {
          $('td:eq(5)', row).addClass('bottom-score');
        }
      }
    });
  });
</script>
</body>
</html>